; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	
;   11	#include <graphx.h>
;   12	#include <keypadc.h>
;   13	
;   14	// Include the snake logos
;   15	#include "gfx/all_gfx.h"
;   16	
;   17	#define TRANSPARENT_COLOR 10 // Some random transparent color
;   18	#define ONE_SECOND        32768/1 // One second on the timer
;   19	#define HALF_SECOND       32768/2 // Half a second on the timer
;   20	#define QUARTER_SECOND    32768/4 // A quarter second on the timer
;   21	
;   22	void main(void) {
_main:
;   23	    homeScreen(); // Load the home screen
	CALL	_homeScreen
;   24	}
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_homeScreen                         IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   25	
;   26	void homeScreen() {
_homeScreen:
	LD	HL,-13
	CALL	__frameset
;   27	    // Variables
;   28	    kb_key_t key;
;   29	    gfx_sprite_t *snake;
;   30	
;   31	    unsigned seconds = 0;
;   32	    char str[10];
;   33	    bool startGameBlink = false;
	LD	(IX+-4),0
;   34	
;   35	    const char *title = "Snake";
	LD	BC,L__1
	LD	(IX+-10),BC
;   36	    const char *startText = "[ENTER] Start game";
	LD	BC,L__2
	LD	(IX+-3),BC
;   37	    const char *madeBy = "Made by Banakin";
	LD	BC,L__3
	LD	(IX+-13),BC
;   38	
;   39	    // Allocate space for the decompressed sprite
;   40	    snake = gfx_MallocSprite(snake_width, snake_height); // Same as: gfx_AllocSprite(apple_width, apple_height, malloc)
	LD	BC,_malloc
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_gfx_AllocSprite
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-7),HL
;   41	
;   42	    // Decompress the sprite
;   43	    zx7_Decompress(snake, snake_compressed);
	LD	BC,_snake_compressed
	PUSH	BC
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   44	    
;   45	    // Initialize the 8bpp graphics
;   46	    gfx_Begin();
	CALL	_gfx_Begin
;   47	
;   48	    // Clear the homescreen and set up palette
;   49	    os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
;   50	    gfx_SetPalette(all_gfx_pal, sizeof_all_gfx_pal, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,6
	PUSH	BC
	LD	BC,_all_gfx_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   51	
;   52	    // Fill the screen black
;   53	    gfx_FillScreen(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   54	
;   55	    // Set text BG and Transparent Color (Allows for white text)
;   56	    gfx_SetTextBGColor(TRANSPARENT_COLOR); // Set Text BG
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   57	    gfx_SetTextTransparentColor(TRANSPARENT_COLOR); // Set Text Transparent Color
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;   58	
;   59	    // Printing title and icon
;   60	    gfx_SetTextScale(5, 5); // Text size
	LD	BC,5
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   61	    gfx_SetTextFGColor(6); // Text color
	LD	BC,6
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   62	    gfx_PrintStringXY(title, (LCD_WIDTH - ((snake_width*13)+ 10 + gfx_GetStringWidth(title)))/2+((snake_width*13)+ 10), 10); // Print text
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+62
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	LD	IY,HL
	LEA	BC,IY+62
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   63	    gfx_ScaledSprite_NoClip(snake, (LCD_WIDTH - ((snake_width*13)+ 10 + gfx_GetStringWidth(title)))/2, 10, 13, 13); // Print icon (Sprite)
	LD	BC,13
	PUSH	BC
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(IX+-10)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	IY,HL
	LEA	BC,IY+62
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_gfx_ScaledSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   64	
;   65	    // Printing "[enter] Start game"
;   66	    gfx_SetTextScale(2, 2); // Text size
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   67	    gfx_SetTextFGColor(255); // Text color
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   68	    gfx_PrintStringXY(startText, (LCD_WIDTH - gfx_GetStringWidth(startText))/2, LCD_HEIGHT/2); // Print text
	LD	BC,120
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   69	
;   70	    // Printing "Made by Banakin"
;   71	    gfx_SetTextScale(1, 1); // Text size
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   72	    gfx_SetTextFGColor(255); // Text color
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   73	    gfx_PrintStringXY(madeBy, (LCD_WIDTH - gfx_GetStringWidth(madeBy))/2, LCD_HEIGHT - 18); // Print text
	LD	BC,222
	PUSH	BC
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+-13)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   74	
;   75	    // Blinking text timer variables
;   76	    timer_Control = TIMER1_DISABLE; // Disable the timer so it doesn't run when we don't want it to be running
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   77	    timer_1_ReloadValue = timer_1_Counter = HALF_SECOND; // By using the 32768 kHz clock, we can count for exactly 1 second here, or a different interval of time
	LD	BC,16384
	LD	(15859712),BC
	XOR	A,A
	LD	(15859715),A
	LD	BC,(15859712)
	LD	A,(15859715)
	LD	(15859716),BC
	LD	(15859719),A
;   78	    timer_Control = TIMER1_ENABLE | TIMER1_32K | TIMER1_0INT | TIMER1_DOWN; // Enable the timer, set it to the 32768 kHz clock, enable an interrupt once it reaches 0, and make it count down
	LD	HL,15859760
	LD	(HL),7
	INC	HL
	LD	(HL),0
;   79	    
;   80	    // Loop until Clear is pressed
;   81	    do {
L_13:
;   82	        // Blinking text timer
;   83	        if (timer_IntStatus & TIMER1_RELOADED) {
	LD	A,(15859764)
	AND	A,4
	LD	C,A
	LD	B,0
	LD	HL,BC
	CALL	__scmpzero
	JR	Z,L_8
;   84	            if (startGameBlink == false) {
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_5
;   85	                // Print a string
;   86	                gfx_SetTextScale(2, 2); // Text size
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;   87	                gfx_SetTextFGColor(255); // Text color
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   88	                gfx_PrintStringXY(startText, (LCD_WIDTH - gfx_GetStringWidth(startText))/2, LCD_HEIGHT/2); // Print text
	LD	BC,120
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;   89	                startGameBlink = true;
	LD	(IX+-4),1
;   90	            } else {
	JR	L_6
L_5:
;   91	                gfx_FillRectangle((LCD_WIDTH - gfx_GetStringWidth(startText))/2, LCD_HEIGHT/2, gfx_GetStringWidth(startText), 16);
	LD	BC,16
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	PUSH	HL
	LD	BC,120
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	LD	BC,HL
	LD	HL,320
	POP	DE
	LD	A,1
	OR	A,A
	SBC	HL,BC
	CALL	__ishru_b
	PUSH	HL
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   92	                startGameBlink = false;
	LD	(IX+-4),0
;   93	            }
L_6:
;   94	            // Acknowledge the reload
;   95	            timer_IntAcknowledge = TIMER1_RELOADED;
	LD	HL,15859764
	LD	(HL),4
	INC	HL
	LD	(HL),0
;   96	        }
L_8:
;   97	
;   98	        // Update kb_Data
;   99	        kb_Scan();
	CALL	_kb_Scan
;  100	
;  101	        if (kb_Data[6] == kb_Enter){
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_11
;  102	            // Stop the timer
;  103	            timer_Control = TIMER1_DISABLE;
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  104	            // Clear the sprite from memory
;  105	            free(snake);
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_free
	POP	BC
;  106	            // Start the game
;  107	            startGame();
	CALL	_startGame
;  108	        }
L_11:
;  109	
;  110	        if (kb_Data[6] == kb_Clear){
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_14
;  111	            // Stop the timer
;  112	            timer_Control = TIMER1_DISABLE;
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  113	            // Clear the sprite from memory
;  114	            free(snake);
	LD	BC,(IX+-7)
	PUSH	BC
	CALL	_free
	POP	BC
;  115	            // Close the graphics
;  116	            gfx_End();
	CALL	_gfx_End
;  117	        }
;  118	    } while (kb_Data[6] != kb_Clear && kb_Data[6] != kb_Enter);
L_14:
	LD	A,(16056348)
	CP	A,64
	JR	Z,L_15
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_13
;  119	}
L_15:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _homeScreen ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_startGame                          IMPORT  -----   function
;_free                               IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_ScaledSprite_NoClip            IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_all_gfx_pal                        IMPORT      6   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_snake_compressed                   IMPORT     14   variable
;_zx7_Decompress                     IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;_gfx_AllocSprite                    IMPORT  -----   function
;madeBy                               IX-13      3   variable
;title                                IX-10      3   variable
;snake                                 IX-7      3   variable
;startGameBlink                        IX-4      1   variable
;startText                             IX-3      3   variable


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"Snake"
	DB	0
L__2:
	DB	"[ENTER] Start game"
	DB	0
L__3:
	DB	"Made by Banakin"
	DB	0
	SEGMENT CODE
;  120	
;  121	void startGame() {
_startGame:
	LD	HL,-6
	CALL	__frameset
;  122	    // Variables
;  123	    bool key, prevkey;
;  124	    const char *pausedMessage = "Paused";
	LD	BC,L__11
	LD	(IX+-5),BC
;  125	    bool isPaused = false;
	LD	(IX+-1),0
;  126	
;  127	    // Clear screen (Set it to black)
;  128	    gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  129	    gfx_FillRectangle(0, 0, LCD_WIDTH, LCD_HEIGHT);
	LD	BC,240
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  130	
;  131	    // Snake movment timer variables
;  132	    timer_Control = TIMER1_DISABLE; // Disable the timer so it doesn't run when we don't want it to be running
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  133	    timer_1_ReloadValue = timer_1_Counter = QUARTER_SECOND; // By using the 32768 kHz clock, we can count for exactly 1 second here, or a different interval of time
	LD	BC,8192
	LD	(15859712),BC
	XOR	A,A
	LD	(15859715),A
	LD	BC,(15859712)
	LD	A,(15859715)
	LD	(15859716),BC
	LD	(15859719),A
;  134	    timer_Control = TIMER1_ENABLE | TIMER1_32K | TIMER1_0INT | TIMER1_DOWN; // Enable the timer, set it to the 32768 kHz clock, enable an interrupt once it reaches 0, and make it count down
	LD	HL,15859760
	LD	(HL),7
	INC	HL
	LD	(HL),0
;  135	
;  136	    // Loop until Clear is pressed
;  137	    do {
L_26:
;  138	        // Snake movment timer
;  139	        if (timer_IntStatus & TIMER1_RELOADED) {
	LD	A,(15859764)
	AND	A,4
	LD	C,A
	LD	B,0
	LD	HL,BC
	CALL	__scmpzero
	JR	Z,L_17
;  140	            gfx_SetColor(6);
	LD	BC,6
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  141	            gfx_FillRectangle(80, 80, 10, 10);
	LD	BC,10
	PUSH	BC
	PUSH	BC
	LD	BC,80
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  142	            // Acknowledge the reload
;  143	            timer_IntAcknowledge = TIMER1_RELOADED;
	LD	HL,15859764
	LD	(HL),4
	INC	HL
	LD	(HL),0
;  144	        }
L_17:
;  145	
;  146	        // Update kb_Data
;  147	        kb_Scan();
	CALL	_kb_Scan
;  148	
;  149	        if (kb_Data[6] == kb_Enter && !prevkey){
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_25
	LD	A,(IX+-2)
	OR	A,A
	JR	NZ,L_25
;  150	            if (isPaused == false){
	LD	A,(IX+-1)
	OR	A,A
	JR	NZ,L_21
;  151	                // Disable the timer
;  152	                timer_Control = TIMER1_DISABLE;
	LD	HL,15859760
	LD	(HL),0
	INC	HL
	LD	(HL),0
;  153	                // Set the game to paused
;  154	                isPaused = true;
	LD	(IX+-1),1
;  155	                // Clear the screen
;  156	                gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  157	                gfx_FillRectangle(0, 0, LCD_WIDTH, LCD_HEIGHT);
	LD	BC,240
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  158	                // Set show paused screen
;  159	                // Printing "GAME GOES HERE LOL"
;  160	                gfx_SetTextScale(2, 2); // Text size
	LD	BC,2
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextScale
	POP	BC
	POP	BC
;  161	                gfx_SetTextFGColor(255); // Text color
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  162	                gfx_PrintStringXY(pausedMessage, (LCD_WIDTH - gfx_GetStringWidth(pausedMessage))/2, LCD_HEIGHT/2); // Print text
	LD	BC,120
	PUSH	BC
	LD	BC,(IX+-5)
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,(IX+-5)
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  163	            } else if (isPaused == true){
	JR	L_22
L_21:
	LD	A,(IX+-1)
	CP	A,1
	JR	NZ,L_22
;  164	                // Clear the screen
;  165	                gfx_SetColor(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  166	                gfx_FillRectangle(0, 0, LCD_WIDTH, LCD_HEIGHT);
	LD	BC,240
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
;  167	                // Re-enable timer
;  168	                timer_Control = TIMER1_ENABLE | TIMER1_32K | TIMER1_0INT | TIMER1_DOWN;
	LD	HL,15859760
	LD	(HL),7
	INC	HL
	LD	(HL),0
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  169	                // Set the game to paused
;  170	                isPaused = false;
	LD	(IX+-1),0
;  171	            }
L_22:
;  172	            prevkey = key;
	LD	A,(IX+-6)
	LD	(IX+-2),A
;  173	        }
L_25:
;  174	
;  175	        if (kb_Data[6] == kb_Clear){
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_27
;  176	            // Close the graphics
;  177	            gfx_End();
	CALL	_gfx_End
;  178	        }
;  179	    } while (kb_Data[6] != kb_Clear /* && kb_Data[6] != kb_Enter */);
L_27:
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_26
	LD	SP,IX
	POP	IX
	RET	


;**************************** _startGame ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextScale                   IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;key                                   IX-6      1   variable
;pausedMessage                         IX-5      3   variable
;prevkey                               IX-2      1   variable
;isPaused                              IX-1      1   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__11:
	DB	"Paused"
	DB	0
	XREF _zx7_Decompress:ROM
	XREF _all_gfx_pal:ROM
	XREF _snake_compressed:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_ScaledSprite_NoClip:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SetTextScale:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _gfx_AllocSprite:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF __frameset:ROM
	XREF __scmpzero:ROM
	XREF __ishru_b:ROM
	XDEF _startGame
	XDEF _homeScreen
	XDEF _main
	END
